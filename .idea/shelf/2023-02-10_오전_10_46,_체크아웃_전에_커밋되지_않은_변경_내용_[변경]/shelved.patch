Index: main_student.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#프로젝트 시작import pymysql as p\r\n# 23.02.06 ~ 02.11\r\n#10:43 복구\r\nimport sys\r\nfrom PyQt5.QtWidgets import *\r\nfrom PyQt5 import uic\r\nimport socket\r\nimport threading\r\nfrom datetime import datetime\r\nimport requests\r\nimport xmltodict as xmltodict\r\nimport math\r\nfrom tkinter import messagebox, Tk\r\nimport json\r\n\r\nform_class = uic.loadUiType(\"main.ui\")[0]\r\nsvrip = 'localhost'\r\nport = 9000\r\n\r\ndb_host = '10.10.21.105'\r\ndb_port = 3306\r\ndb_user = 'network'\r\ndb_pw = 'aaaa'\r\ndb = 'api'\r\n\r\n\r\ndef db_execute(sql):\r\n    conn = p.connect(host=db_host, port=db_port, user=db_user, password=db_pw, db=db, charset='utf8')\r\n    c = conn.cursor()\r\n    c.execute(sql)\r\n    conn.commit()\r\n    conn.close()\r\n    return c.fetchall()\r\n\r\n\r\nclass WindowClass(QMainWindow, form_class):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.setupUi(self)\r\n        self.stackedWidget.setCurrentIndex(0)\r\n        self.read_api()\r\n        self.action = True\r\n\r\n        # 시그널 - 메서드\r\n        self.hbt_add.clicked.connect(self.signup)\r\n        self.hbt_login.clicked.connect(self.login)\r\n        self.hle_name.returnPressed.connect(self.login)\r\n        self.tabWidget_2.tabBarClicked.connect(self.show_contents)\r\n        self.comboBox.currentTextChanged.connect(self.select_year)\r\n        self.study_save_btn.clicked.connect(self.save_contents)\r\n        self.load_study_btn.clicked.connect(self.load_save)\r\n        # 서버 연결\r\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        self.sock.connect((svrip, port))\r\n        self.p_msg('연결된 서버: ', svrip)\r\n        th = threading.Thread(target=self.receive, args=(self.sock,), daemon=True)\r\n        th.start()\r\n\r\n    # API 자료가 업데이트 돼면 DB자료 변경\r\n    def read_api(self):\r\n        key = 'cbbbb410eb3d4bfa88e79a9172862f'\r\n        url = f'http://www.incheon.go.kr/dp/openapi/data?apicode=10&page=1&key={key}'\r\n        data_total = int(xmltodict.parse(requests.get(url).content)['data']['totalCount'])\r\n        total_page = math.ceil(data_total / 10)\r\n        sql = f'select count(*) from learning_data;'\r\n        api = db_execute(sql)[0][0]\r\n        if api < data_total:\r\n            sql = 'delete from learning_data;'\r\n            db_execute(sql)\r\n            for page in range(1, total_page + 1):\r\n                url = f'http://www.incheon.go.kr/dp/openapi/data?apicode=10&page={page}&key={key}'\r\n                content = requests.get(url).content\r\n                dict = xmltodict.parse(content)\r\n                data = dict['data']\r\n                date_item = data['list']['item']\r\n                for i in date_item:\r\n                    data_listnum = i['listNum']\r\n                    data_year = i['histYear']\r\n                    data_month = i['histDate'][0] + i['histDate'][1]\r\n                    data_day = i['histDate'][2] + i['histDate'][3]\r\n                    date_summary = i['summary']\r\n                    spl = f'insert into learning_data values ({data_listnum},\"{data_year}년 {data_month}월 {data_day}일\",\"{date_summary}\")'\r\n                    db_execute(spl)\r\n\r\n    def show_contents(self, index): # Qtablewidget에 보여줄 학습내용 연도 선택\r\n        self.comboBox.clear()\r\n        if index==1:\r\n            for i in range(1000,2001,100):\r\n                if i == 2000:\r\n                    self.comboBox.addItem(str(i) + '년' + '~' + str(i + 23)+'년')\r\n                    # self.send_msg('call_contents', [index, self.comboBox.currentText()])\r\n                else:\r\n                    self.comboBox.addItem(str(i)+'년'+'~'+str(i+100)+'년')\r\n                    # self.send_msg('call_contents', [index, self.comboBox.currentText()])\r\n        else:\r\n            print(index)\r\n        # if index == 2:\r\n    def select_year(self):\r\n        self.send_msg(\"call_contents\",['연도',self.comboBox.currentText()])\r\n\r\n    def save_contents(self):# 학습내용 저장하기\r\n        self.save1=self.stw_contents.item(0,1).text()\r\n        print(self.msg)\r\n        self.save2=self.stw_contents.item(self.msg-1,1).text()\r\n        print(self.save1, self.save2)\r\n        self.send_msg('save_contents',[self.name,self.save1,self.save2])\r\n\r\n\r\n    def load_save(self):\r\n        self.send_msg('loading_studying',[self.name,self.save1,self.save2])\r\n\r\n\r\n\r\n\r\n    def receive(self, c):\r\n        while True:\r\n            new_msg = True\r\n            tmsg = ''\r\n            while True:\r\n                msg = c.recv(4096)\r\n                tmsg += msg.decode()\r\n\r\n                print(tmsg)\r\n                if new_msg:\r\n                    size = int(msg[:10])\r\n                    tmsg = tmsg[10:]\r\n                    new_msg = False\r\n                if len(tmsg) == size:\r\n                    break\r\n            rmsg = json.loads(tmsg)\r\n            if rmsg:\r\n                self.p_msg('받은 메시지:', rmsg)\r\n                self.reaction(rmsg[0], rmsg[1])\r\n\r\n\r\n\r\n\r\n    # # 수신 메서드\r\n    # def receive(self, c):\r\n    #     while True:\r\n    #         c_msg=c.recv(210000000).decode()\r\n    #         print(c_msg,'gdgdgd')\r\n    #         rmsg = json.loads(c_msg)\r\n    #         if rmsg:\r\n    #\r\n    #             self.p_msg('받은 메시지:', rmsg)\r\n    #             self.reaction(rmsg[0], rmsg[1])\r\n\r\n\r\n    # 반응 메서드\r\n    def reaction(self, head, msg):\r\n        print(head, msg)\r\n        if head == 'login':\r\n            if msg[0] == 'success':\r\n                self.stackedWidget.setCurrentIndex(1)\r\n                self.code = msg[1]\r\n                self.name = msg[2]\r\n                self.messagebox('로그인 성공')\r\n            else:\r\n                self.messagebox('로그인 실패')\r\n        elif head == 'signup':\r\n            if msg[0] == 'success':\r\n                code = msg[1]\r\n                self.messagebox(f'가입 성공, 발급 코드: {code} 입니다.')\r\n            else:\r\n                self.messagebox('가입 실패')\r\n        elif head == 'load_history': ## db learning_data  Qtablewidget에 표시\r\n            self.msg=len(msg)\r\n            self.stw_contents.setRowCount(len(msg))\r\n            self.stw_contents.setColumnCount(3)\r\n            for i in range(len(msg)):\r\n                for j in range(3):\r\n                    self.stw_contents.setItem(i, j, QTableWidgetItem(str(msg[i][j])))\r\n            # self.stw_contents.resizeColumnsToContents() # 내용에 따라서 크리 자동으로 조절\r\n        elif head == 'loading_studying':  # 저장된 학습내용 불러옴\r\n            self.stw_contents.setRowCount(len(msg))\r\n            self.stw_contents.setColumnCount(3)\r\n            for i in range(len(msg)):\r\n                for j in range(3):\r\n                    self.stw_contents.setItem(i, j, QTableWidgetItem(str(msg[i][j])))\r\n    ###########################################################################\r\n# 시그널 - 메서드\r\n###########################################################################\r\n    # 로그인 (학생 프로그램으로 서버에 [학생 코드, 권한, 이름] 전송)\r\n    def login(self):\r\n        code = self.hle_code.text()\r\n        self.name = self.hle_name.text()\r\n        if code and self.name:\r\n            self.send_msg('login', [code, '학생', self.name])\r\n        else:\r\n            self.messagebox('로그인 실패')\r\n        self.hle_code.clear()\r\n        self.hle_name.clear()\r\n\r\n    # 회원 가입 (선생, 학생 프로그램 상관없이 서버에 [권한, 이름] 전송)\r\n    def signup(self):\r\n        name = self.hle_add_name.text()\r\n        admin = self.hrb_admin.isChecked()\r\n        user = self.hrb_user.isChecked()\r\n        if admin:\r\n            self.send_msg('signup', ['관리자', name])\r\n        elif user:\r\n            self.send_msg('signup', ['학생', name])\r\n        self.hle_add_name.clear()\r\n\r\n###########################################################################\r\n# 도구 메서드\r\n###########################################################################\r\n\r\n    # tkinter 를 이용한 messagbox 송출\r\n    def messagebox(self, value):\r\n        tk_window = Tk()\r\n        tk_window.geometry(\"0x0+3000+6000\")\r\n        messagebox.showinfo('안내창', f'{value}')\r\n        tk_window.destroy()\r\n\r\n    # 주제, 내용으로 서버에 데이터 전송\r\n    def send_msg(self, head, value):\r\n        msg = json.dumps([head, value])\r\n        self.sock.sendall(msg.encode())\r\n        self.p_msg('보낸 메시지:', msg)\r\n\r\n    # 메시지 종류, 내용을 매개 변수로 콘솔에 확인 내용 출력\r\n    def p_msg(self, head, *msg):\r\n        if msg:\r\n            print(f'{datetime.now()} / {head} {msg}')\r\n        else:\r\n            print(f'{datetime.now()} / {head}')\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app = QApplication(sys.argv)\r\n    myWindow = WindowClass()\r\n    myWindow.show()\r\n    app.exec_()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main_student.py b/main_student.py
--- a/main_student.py	(revision 0a18d662996a374f8fdba9704bdf8f059c4c1521)
+++ b/main_student.py	(date 1675993605512)
@@ -1,6 +1,5 @@
 #프로젝트 시작import pymysql as p
 # 23.02.06 ~ 02.11
-#10:43 복구
 import sys
 from PyQt5.QtWidgets import *
 from PyQt5 import uic
Index: main_server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># 23.02.06 ~ 02.11\r\n#10:43 복구\r\nimport pymysql as p\r\nimport socketserver\r\nfrom datetime import datetime\r\nimport json\r\n\r\nserver_ip = 'localhost'\r\nserver_port = 9000\r\n\r\ndb_host = '10.10.21.105'\r\ndb_port = 3306\r\ndb_user = 'network'\r\ndb_pw = 'aaaa'\r\ndb = 'api'\r\n\r\n\r\n# DB에 값을 변경하거나 불러오는 함수\r\ndef db_execute(sql):\r\n    conn = p.connect(host=db_host, port=db_port, user=db_user, password=db_pw, db=db, charset='utf8')\r\n    c = conn.cursor()\r\n    c.execute(sql)\r\n    conn.commit()\r\n    conn.close()\r\n    return c.fetchall()\r\n\r\n\r\n# 소켓 연결 요청 처리\r\nclass TH(socketserver.BaseRequestHandler):\r\n    def handle(self):\r\n        c_sock = self.request\r\n        if c_sock not in server.c_socks:\r\n            server.c_socks.append(c_sock)\r\n        server.p_msg(c_sock, '연결됨')\r\n        server.receive(c_sock)\r\n\r\n\r\n# 소켓 객체 생성\r\nclass TTS(socketserver.ThreadingMixIn, socketserver.TCPServer):\r\n    pass\r\n\r\n\r\n# 메인서버\r\nclass Server:\r\n    def __init__(self):\r\n        self.c_socks = []\r\n        self.admin_socks = []\r\n        self.student_socks = []\r\n\r\n###########################################################################\r\n# 스레드 객체\r\n###########################################################################\r\n\r\n    # 수신 메서드 ,클라 연결 종료시 종료 메시지 남기고 연결 소켓 제거\r\n    def receive(self, c):\r\n        while True:\r\n            try:\r\n                rmsg = json.loads(c.recv(4096).decode())\r\n                if rmsg:\r\n                    self.p_msg(c, '받은 메시지:', rmsg)\r\n                    self.reaction(c, rmsg[0], rmsg[1])\r\n            except ConnectionResetError:\r\n                self.p_msg(c, '연결 종료')\r\n                self.c_socks.remove(c)\r\n                if c in self.student_socks:\r\n                    self.student_socks.remove(c)\r\n                if c in self.admin_socks:\r\n                    self.admin_socks.remove(c)\r\n                c.close()\r\n                break\r\n            else:\r\n                continue\r\n\r\n    # 반응 메서드\r\n    def reaction(self, c, head, msg):\r\n        print(head, msg)\r\n        # 로그인\r\n        if head == 'login':\r\n            sql = f\"select * from login_data where member_num = '{msg[0]}' and authority = '{msg[1]}' and member_name='{msg[2]}';\"\r\n            login = db_execute(sql)\r\n            # 클라에서 받은 정보가 DB에 등록 되어 있는경우\r\n            if login:\r\n                # DB에 저장된 문제 등록 목록 및 정보 클라에 전달\r\n                # [로그인성공여부, 회원코드, 회원이름, 문제등록번호목록]\r\n                sql = f\"select distinct quiz_num from quiz;\"\r\n                quiz_num = db_execute(sql)\r\n                self.send_msg(c, 'login', ['success', msg[0], msg[2], quiz_num])\r\n                # 정보를 선생과 학생으로 구분하여 전송하기위해 list에 소켓 저장\r\n                if msg[1] == '관리자':\r\n                    self.admin_socks.append(c)\r\n                else:\r\n                    self.student_socks.append(c)\r\n            # 학생 또는 선생 프로그램에서 다른 권한의 계정으로 로그인 시도한 경우\r\n            # 로그인 정보가 틀린경우\r\n            else:\r\n                self.send_msg(c, 'login', ['failure'])\r\n        # 회원가입\r\n        elif head == 'signup':\r\n            # 관리자 권한 가입 정보 DB에 저장 및 정보 전송 [성공여부, 회원 코드]\r\n            if msg[0] == '관리자':\r\n                # 회원 코드를 생성하기위해 번호조회\r\n                sql = \"select count(*) from login_data where member_num like 'a%';\"\r\n                num = int(db_execute(sql)[0][0])+1\r\n                # DB에 회원 정보 등록[회원코드, 권한, 이름]\r\n                sql = f\"insert into login_data values('a{num}', '{msg[0]}', '{msg[1]}')\"\r\n                db_execute(sql)\r\n                self.send_msg(c, 'signup', ['success', f'a{num}'])\r\n            # 학생 권한 가입 정보 DB에 저장 및 정보 전송 [성공여부, 회원 코드]\r\n            else:\r\n                # 회원 코드를 생성하기위해 번호조회\r\n                sql = \"select count(*) from login_data where member_num like 's%';\"\r\n                num = int(db_execute(sql)[0][0])+1\r\n                # DB에 회원 정보 등록[회원코드, 권한, 이름]\r\n                sql = f\"insert into login_data values('s{num}', '{msg[0]}','{msg[1]}')\"\r\n                db_execute(sql)\r\n                # 회원관리 DB에 신규 등록\r\n                sql = f\"insert into study_progress values('F','{msg[1]}', '0', '0');\"\r\n                db_execute(sql)\r\n                self.send_msg(c, 'signup', ['success', f's{num}'])\r\n\r\n        # ``` 문제 만들기\r\n        # 문제 등록하기\r\n        elif head == 'register_question':\r\n            sql = \"select count(distinct quiz_num) from quiz;\"\r\n            quiz_num = db_execute(sql)[0][0]\r\n            # 신규 문제\r\n            if msg[0][0] > quiz_num:\r\n                # 문제 DB에 저장\r\n                for v in msg:\r\n                    sql = f\"insert into quiz values('{v[0]}', '{v[1]}', '{v[2]}', '{v[3]}', '{v[4]}');\"\r\n                    db_execute(sql)\r\n                # 관리자 권한을 가진 모든 클라에게 전송 [추가 등록된 문제 등록 번호]\r\n                for administrator in self.admin_socks:\r\n                    self.send_msg(administrator, 'add_acb_num', msg[0][0])\r\n            # 기존 문제 수정\r\n            else:\r\n                sql = f\"delete from quiz where quiz_num = {msg[0][0]};\"\r\n                db_execute(sql)\r\n                for v in msg:\r\n                    sql = f\"insert into quiz values('{v[0]}', '{v[1]}', '{v[2]}', '{v[3]}', '{v[4]}');\"\r\n                    db_execute(sql)\r\n        # 해당 등록 번호의 문제 목록 클라에 전송\r\n        elif head == 'load_quiz':\r\n            sql = f\"select * from quiz where quiz_num= '{msg}'\"\r\n            quiz_list = db_execute(sql)\r\n            self.send_msg(c, 'load_quiz', quiz_list)\r\n        # ```\r\n        ##학생용\r\n        # 학생이 학습내용 풀러오기\r\n\r\n        elif head == 'call_contents':\r\n            if msg[1] != '연도선택':\r\n                try:\r\n                    year=msg[1].split(\"~\")\r\n                    print(year)\r\n                    sql=f'SELECT *FROM learning_data WHERE date BETWEEN \"{year[0]}\" AND \"{year[1]}\"'\r\n                    study_contents=db_execute(sql)\r\n                    print(study_contents)\r\n                    self.send_msg(c,'load_history',study_contents)\r\n                except IndexError:\r\n                    print('study')\r\n            else:\r\n                print('gg')\r\n        elif head == \"save_contents\": # 학습내용 저장 하기\r\n            sql=f'UPDATE study_progress SET study_progress = \"{msg[0]}:{msg[1]}~{msg[2]}\" WHERE student_name = \"{msg[0]}\"'\r\n            update_progress=db_execute(sql)\r\n            print(update_progress)\r\n\r\n        elif head == 'loading_studying': #저장된 학습내용 불러오기\r\n            sql=f'SELECT *FROM learning_data WHERE date BETWEEN \"{msg[1]}\" AND \"{msg[2]}\"'\r\n            find_contents=db_execute(sql)\r\n            self.send_msg(c,'loading_studying',find_contents)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n###########################################################################\r\n# 도구 메서드\r\n###########################################################################\r\n\r\n    # 클라소켓, 주제, 내용으로 클라에 데이터 전송\r\n    # def send_msg(self, c, head, value):\r\n    #     msg = json.dumps([head, value])\r\n    #     print(len(msg))\r\n    #     c.sendall(msg.encode())\r\n    #     self.p_msg(c, '보낸 메시지:', value)\r\n\r\n    def send_msg(self, c, head, value):\r\n        msg = json.dumps([head, value])\r\n        msg = f\"{len(msg):<10}\"+msg\r\n        print(len(msg))\r\n        c.sendall(msg.encode())\r\n        self.p_msg(c, '보낸 메시지:', value)\r\n\r\n    # 클라소켓, 메시지 종류, 내용을 매개 변수로 콘솔에 확인 내용 출력\r\n    def p_msg(self, sock, head, *msg):\r\n        # 단순히 보기 편하게 할려고 만든 조건\r\n        if msg:\r\n            print(f'{datetime.now()} / {sock.getpeername()} / {head} {msg}')\r\n        else:\r\n            print(f'{datetime.now()} / {sock.getpeername()} / {head}')\r\n\r\n\r\nif __name__ == '__main__':\r\n    server = Server()\r\n    with TTS((server_ip, server_port), TH) as TS:\r\n        TS.serve_forever()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main_server.py b/main_server.py
--- a/main_server.py	(revision 0a18d662996a374f8fdba9704bdf8f059c4c1521)
+++ b/main_server.py	(date 1675993605559)
@@ -1,5 +1,5 @@
 # 23.02.06 ~ 02.11
-#10:43 복구
+
 import pymysql as p
 import socketserver
 from datetime import datetime
