Index: main_server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># 23.02.06 ~ 02.11\r\nimport pymysql as p\r\nimport socketserver\r\nfrom datetime import datetime\r\nimport json\r\n\r\nserver_ip = 'localhost'\r\nserver_port = 9000\r\n\r\ndb_host = '10.10.21.105'\r\ndb_port = 3306\r\ndb_user = 'network'\r\ndb_pw = 'aaaa'\r\ndb = 'api'\r\n\r\n\r\n# DB에 값을 변경하거나 불러오는 함수\r\ndef db_execute(sql):\r\n    conn = p.connect(host=db_host, port=db_port, user=db_user, password=db_pw, db=db, charset='utf8')\r\n    c = conn.cursor()\r\n    c.execute(sql)\r\n    conn.commit()\r\n    conn.close()\r\n    return c.fetchall()\r\n\r\n\r\n# 소켓 연결 요청 처리\r\nclass TH(socketserver.BaseRequestHandler):\r\n    def handle(self):\r\n        c_sock = self.request\r\n        if c_sock not in server.c_socks:\r\n            server.c_socks.append(c_sock)\r\n        server.p_msg(c_sock, '연결됨')\r\n        server.receive(c_sock)\r\n\r\n\r\n# 소켓 객체 생성\r\nclass TTS(socketserver.ThreadingMixIn, socketserver.TCPServer):\r\n    pass\r\n\r\n\r\n# 메인서버\r\nclass Server:\r\n    def __init__(self):\r\n        self.c_socks = []\r\n        self.admin_socks = []\r\n        self.student_socks = []\r\n\r\n###########################################################################\r\n# 스레드 객체\r\n###########################################################################\r\n\r\n    # 수신 메서드 ,클라 연결 종료시 종료 메시지 남기고 연결 소켓 제거\r\n    def receive(self, c):\r\n        while True:\r\n            try:\r\n                rmsg = json.loads(c.recv(4096).decode())\r\n                if rmsg:\r\n                    self.p_msg(c, '받은 메시지:', rmsg)\r\n                    self.reaction(c, rmsg[0], rmsg[1])\r\n            except ConnectionResetError:\r\n                self.p_msg(c, '연결 종료')\r\n                self.c_socks.remove(c)\r\n                if c in self.student_socks:\r\n                    self.student_socks.remove(c)\r\n                if c in self.admin_socks:\r\n                    self.admin_socks.remove(c)\r\n                c.close()\r\n                break\r\n            else:\r\n                continue\r\n\r\n    # 반응 메서드\r\n    def reaction(self, c, head, msg):\r\n        print(head, msg)\r\n        # 로그인\r\n        if head == 'login':\r\n            sql = f\"select * from login_data where member_num = '{msg[0]}' and authority = '{msg[1]}' and member_name='{msg[2]}';\"\r\n            login = db_execute(sql)\r\n            # 클라에서 받은 정보가 DB에 등록 되어 있는경우\r\n            if login:\r\n                # DB에 저장된 문제 등록 목록 및 정보 클라에 전달\r\n                # [로그인성공여부, 회원코드, 회원이름, 문제등록번호목록]\r\n                sql = f\"select distinct quiz_num from quiz;\"\r\n                quiz_num = db_execute(sql)\r\n                self.send_msg(c, 'login', ['success', msg[0], msg[2], quiz_num])\r\n                # 정보를 선생과 학생으로 구분하여 전송하기위해 list에 소켓 저장\r\n                if msg[1] == '관리자':\r\n                    self.admin_socks.append(c)\r\n                else:\r\n                    self.student_socks.append(c)\r\n            # 학생 또는 선생 프로그램에서 다른 권한의 계정으로 로그인 시도한 경우\r\n            # 로그인 정보가 틀린경우\r\n            else:\r\n                self.send_msg(c, 'login', ['failure'])\r\n        # 회원가입\r\n        elif head == 'signup':\r\n            # 관리자 권한 가입 정보 DB에 저장 및 정보 전송 [성공여부, 회원 코드]\r\n            if msg[0] == '관리자':\r\n                # 회원 코드를 생성하기위해 번호조회\r\n                sql = \"select count(*) from login_data where member_num like 'a%';\"\r\n                num = int(db_execute(sql)[0][0])+1\r\n                # DB에 회원 정보 등록[회원코드, 권한, 이름]\r\n                sql = f\"insert into login_data values('a{num}', '{msg[0]}', '{msg[1]}')\"\r\n                db_execute(sql)\r\n                self.send_msg(c, 'signup', ['success', f'a{num}'])\r\n            # 학생 권한 가입 정보 DB에 저장 및 정보 전송 [성공여부, 회원 코드]\r\n            else:\r\n                # 회원 코드를 생성하기위해 번호조회\r\n                sql = \"select count(*) from login_data where member_num like 's%';\"\r\n                num = int(db_execute(sql)[0][0])+1\r\n                # DB에 회원 정보 등록[회원코드, 권한, 이름]\r\n                sql = f\"insert into login_data values('s{num}', '{msg[0]}','{msg[1]}')\"\r\n                db_execute(sql)\r\n                # 회원관리 DB에 신규 등록\r\n                sql = f\"insert into study_progress values('F','{msg[1]}', '0', '0');\"\r\n                db_execute(sql)\r\n                self.send_msg(c, 'signup', ['success', f's{num}'])\r\n\r\n        # ``` 문제 만들기\r\n        # 문제 등록하기\r\n        elif head == 'register_question':\r\n            sql = \"select count(distinct quiz_num) from quiz;\"\r\n            quiz_num = db_execute(sql)[0][0]\r\n            # 신규 문제\r\n            if msg[0][0] > quiz_num:\r\n                # 문제 DB에 저장\r\n                for v in msg:\r\n                    sql = f\"insert into quiz values('{v[0]}', '{v[1]}', '{v[2]}', '{v[3]}', '{v[4]}');\"\r\n                    db_execute(sql)\r\n                # 관리자 권한을 가진 모든 클라에게 전송 [추가 등록된 문제 등록 번호]\r\n                for administrator in self.admin_socks:\r\n                    self.send_msg(administrator, 'add_acb_num', msg[0][0])\r\n            # 기존 문제 수정\r\n            else:\r\n                sql = f\"delete from quiz where quiz_num = {msg[0][0]};\"\r\n                db_execute(sql)\r\n                for v in msg:\r\n                    sql = f\"insert into quiz values('{v[0]}', '{v[1]}', '{v[2]}', '{v[3]}', '{v[4]}');\"\r\n                    db_execute(sql)\r\n        # 해당 등록 번호의 문제 목록 클라에 전송\r\n        elif head == 'load_quiz':\r\n            sql = f\"select * from quiz where quiz_num= '{msg}'\"\r\n            quiz_list = db_execute(sql)\r\n            self.send_msg(c, 'load_quiz', quiz_list)\r\n        # ```\r\n        ##학생용\r\n        # 학생이 학습내용 풀러오기\r\n\r\n        elif head == 'call_contents':\r\n            if msg[1] != '연도선택':\r\n                try:\r\n                    year=msg[1].split(\"~\")\r\n                    print(year)\r\n                    sql=f'SELECT *FROM learning_data WHERE date BETWEEN \"{year[0]}\" AND \"{year[1]}\"'\r\n                    study_contents=db_execute(sql)\r\n                    print(study_contents)\r\n                    self.send_msg(c,'load_history',study_contents)\r\n                except IndexError:\r\n                    print('study')\r\n            else:\r\n                print('gg')\r\n        elif head == \"save_contents\": # 학습내용 저장 하기\r\n            sql=f'UPDATE study_progress SET study_progress = \"{msg[0]}:{msg[1]}~{msg[2]}\" WHERE student_name = \"{msg[0]}\"'\r\n            update_progress=db_execute(sql)\r\n            print(update_progress)\r\n\r\n        elif head == 'loading_studying': #저장된 학습내용 불러오기\r\n            sql=f'SELECT *FROM learning_data WHERE date BETWEEN \"{msg[1]}\" AND \"{msg[2]}\"'\r\n            find_contents=db_execute(sql)\r\n            self.send_msg(c,'loading_studying',find_contents)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n###########################################################################\r\n# 도구 메서드\r\n###########################################################################\r\n\r\n    # 클라소켓, 주제, 내용으로 클라에 데이터 전송\r\n    # def send_msg(self, c, head, value):\r\n    #     msg = json.dumps([head, value])\r\n    #     print(len(msg))\r\n    #     c.sendall(msg.encode())\r\n    #     self.p_msg(c, '보낸 메시지:', value)\r\n\r\n    def send_msg(self, c, head, value):\r\n        msg = json.dumps([head, value])\r\n        msg = f\"{len(msg):<10}\"+msg\r\n        print(len(msg))\r\n        c.sendall(msg.encode())\r\n        self.p_msg(c, '보낸 메시지:', value)\r\n\r\n    # 클라소켓, 메시지 종류, 내용을 매개 변수로 콘솔에 확인 내용 출력\r\n    def p_msg(self, sock, head, *msg):\r\n        # 단순히 보기 편하게 할려고 만든 조건\r\n        if msg:\r\n            print(f'{datetime.now()} / {sock.getpeername()} / {head} {msg}')\r\n        else:\r\n            print(f'{datetime.now()} / {sock.getpeername()} / {head}')\r\n\r\n\r\nif __name__ == '__main__':\r\n    server = Server()\r\n    with TTS((server_ip, server_port), TH) as TS:\r\n        TS.serve_forever()\r\n
===================================================================
diff --git a/main_server.py b/main_server.py
--- a/main_server.py	
+++ b/main_server.py	
@@ -1,4 +1,3 @@
-# 23.02.06 ~ 02.11
 import pymysql as p
 import socketserver
 from datetime import datetime
@@ -54,17 +53,20 @@
     def receive(self, c):
         while True:
             try:
-                rmsg = json.loads(c.recv(4096).decode())
+                rmsg = json.loads(c.recv(1024).decode())
                 if rmsg:
                     self.p_msg(c, '받은 메시지:', rmsg)
                     self.reaction(c, rmsg[0], rmsg[1])
             except ConnectionResetError:
                 self.p_msg(c, '연결 종료')
                 self.c_socks.remove(c)
+                print('연결된 클라: ', len(self.c_socks))
                 if c in self.student_socks:
                     self.student_socks.remove(c)
+                    print('연결된 학생: ', len(self.student_socks))
                 if c in self.admin_socks:
                     self.admin_socks.remove(c)
+                    print('연결된 선생: ', len(self.student_socks))
                 c.close()
                 break
             else:
@@ -116,6 +118,8 @@
                 sql = f"insert into study_progress values('F','{msg[1]}', '0', '0');"
                 db_execute(sql)
                 self.send_msg(c, 'signup', ['success', f's{num}'])
+                for client in self.admin_socks:
+                    self.send_msg(client, 'add_alw_user', [f's{num}', f'{msg[1]}'])
 
         # ``` 문제 만들기
         # 문제 등록하기
@@ -144,59 +148,29 @@
             quiz_list = db_execute(sql)
             self.send_msg(c, 'load_quiz', quiz_list)
         # ```
-        ##학생용
-        # 학생이 학습내용 풀러오기
-
-        elif head == 'call_contents':
-            if msg[1] != '연도선택':
-                try:
-                    year=msg[1].split("~")
-                    print(year)
-                    sql=f'SELECT *FROM learning_data WHERE date BETWEEN "{year[0]}" AND "{year[1]}"'
-                    study_contents=db_execute(sql)
-                    print(study_contents)
-                    self.send_msg(c,'load_history',study_contents)
-                except IndexError:
-                    print('study')
+        # ``` 학생 관리
+        elif head == 'management':
+            sql = "select member_num ,member_name from login_data where member_num like 's%';"
+            user_infor = db_execute(sql)
+            self.send_msg(c, 'management', user_infor)
+        elif head == 'study':
+            sql = f"select quiz_num, min(student_name), sum(quiz_point) as sum from quiz_student" \
+                  f" where student_name = '{msg}' group by quiz_num;"
+            user_infor = db_execute(sql)
+            sql = f"select * from quiz_student where student_name = '{msg}' order by quiz_num;"
+            more_infor = db_execute(sql)
+            if user_infor:
+                self.send_msg(c, 'study', [user_infor, more_infor])
             else:
-                print('gg')
-        elif head == "save_contents": # 학습내용 저장 하기
-            sql=f'UPDATE study_progress SET study_progress = "{msg[0]}:{msg[1]}~{msg[2]}" WHERE student_name = "{msg[0]}"'
-            update_progress=db_execute(sql)
-            print(update_progress)
-
-        elif head == 'loading_studying': #저장된 학습내용 불러오기
-            sql=f'SELECT *FROM learning_data WHERE date BETWEEN "{msg[1]}" AND "{msg[2]}"'
-            find_contents=db_execute(sql)
-            self.send_msg(c,'loading_studying',find_contents)
-
-
-
-
-
-
-
-
-
-
-
-
+                self.send_msg(c, 'study', 'False')
 
 ###########################################################################
 # 도구 메서드
 ###########################################################################
 
     # 클라소켓, 주제, 내용으로 클라에 데이터 전송
-    # def send_msg(self, c, head, value):
-    #     msg = json.dumps([head, value])
-    #     print(len(msg))
-    #     c.sendall(msg.encode())
-    #     self.p_msg(c, '보낸 메시지:', value)
-
     def send_msg(self, c, head, value):
         msg = json.dumps([head, value])
-        msg = f"{len(msg):<10}"+msg
-        print(len(msg))
         c.sendall(msg.encode())
         self.p_msg(c, '보낸 메시지:', value)
 
