Index: student.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pymysql as p\r\nimport sys\r\nfrom PyQt5.QtWidgets import *\r\nfrom PyQt5 import uic\r\nimport socket\r\nimport threading\r\nfrom datetime import datetime\r\nimport requests\r\nimport xmltodict as xmltodict\r\nimport math\r\nfrom tkinter import messagebox, Tk\r\nimport json\r\n\r\nform_class = uic.loadUiType(\"main.ui\")[0]\r\nsvrip = 'localhost'\r\nport = 9000\r\n\r\ndb_host = '10.10.21.105'\r\ndb_port = 3306\r\ndb_user = 'network'\r\ndb_pw = 'aaaa'\r\ndb = 'api'\r\n\r\n\r\ndef db_execute(sql):\r\n    conn = p.connect(host=db_host, port=db_port, user=db_user, password=db_pw, db=db, charset='utf8')\r\n    c = conn.cursor()\r\n    c.execute(sql)\r\n    conn.commit()\r\n    conn.close()\r\n    return c.fetchall()\r\n\r\n\r\nclass WindowClass(QMainWindow, form_class):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.setupUi(self)\r\n        self.stackedWidget.setCurrentIndex(0)\r\n        self.read_api()\r\n        self.action = True\r\n\r\n        # 시그널 - 메서드\r\n        self.hbt_add.clicked.connect(self.signup)\r\n        self.hbt_login.clicked.connect(self.login)\r\n\r\n        # 서버 연결\r\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        self.sock.connect((svrip, port))\r\n        self.p_msg('연결된 서버: ', svrip)\r\n        th = threading.Thread(target=self.receive, args=(self.sock,), daemon=True)\r\n        th.start()\r\n\r\n    # API 자료가 업데이트 돼면 DB자료 변경\r\n    def read_api(self):\r\n        key = 'cbbbb410eb3d4bfa88e79a9172862f'\r\n        url = f'http://www.incheon.go.kr/dp/openapi/data?apicode=10&page=1&key={key}'\r\n        data_total = int(xmltodict.parse(requests.get(url).content)['data']['totalCount'])\r\n        total_page = math.ceil(data_total / 10)\r\n        sql = f'select count(*) from learning_data;'\r\n        api = db_execute(sql)[0][0]\r\n        if api < data_total:\r\n            sql = 'delete from learning_data;'\r\n            db_execute(sql)\r\n            for page in range(1, total_page + 1):\r\n                url = f'http://www.incheon.go.kr/dp/openapi/data?apicode=10&page={page}&key={key}'\r\n                content = requests.get(url).content\r\n                dict = xmltodict.parse(content)\r\n                data = dict['data']\r\n                date_item = data['list']['item']\r\n                for i in date_item:\r\n                    data_listnum = i['listNum']\r\n                    data_year = i['histYear']\r\n                    data_month = i['histDate'][0] + i['histDate'][1]\r\n                    data_day = i['histDate'][2] + i['histDate'][3]\r\n                    date_summary = i['summary']\r\n                    spl = f'insert into learning_data values ({data_listnum},\"{data_year}년 {data_month}월 {data_day}일\",\"{date_summary}\")'\r\n                    db_execute(spl)\r\n\r\n    # 수신 메서드\r\n    def receive(self, c):\r\n        while True:\r\n            rmsg = json.loads(c.recv(1024).decode())\r\n            if rmsg:\r\n                self.p_msg('받은 메시지:', rmsg)\r\n                self.reaction(rmsg[0], rmsg[1])\r\n\r\n    # 반응 메서드\r\n    def reaction(self, head, msg):\r\n        print(head, msg)\r\n        if head == 'login':\r\n            if msg[0] == 'success':\r\n                self.stackedWidget.setCurrentIndex(1)\r\n                self.code = msg[1]\r\n                self.name = msg[2]\r\n                self.messagebox('로그인 성공')\r\n            else:\r\n                self.messagebox('로그인 실패')\r\n        elif head == 'signup':\r\n            if msg[0] == 'success':\r\n                code = msg[1]\r\n                self.messagebox(f'가입 성공, 발급 코드: {code} 입니다.')\r\n            else:\r\n                self.messagebox('가입 실패')\r\n\r\n###########################################################################\r\n# 시그널 - 메서드\r\n###########################################################################\r\n    # 로그인 (학생 프로그램으로 서버에 [학생 코드, 권한, 이름] 전송)\r\n    def login(self):\r\n        code = self.hle_code.text()\r\n        name = self.hle_name.text()\r\n        if code and name:\r\n            self.send_msg('login', [code, '학생', name])\r\n        else:\r\n            self.messagebox('로그인 실패')\r\n        self.hle_code.clear()\r\n        self.hle_name.clear()\r\n\r\n    # 회원 가입 (선생, 학생 프로그램 상관없이 서버에 [권한, 이름] 전송)\r\n    def signup(self):\r\n        name = self.hle_add_name.text().split()[0]\r\n        admin = self.hrb_admin.isChecked()\r\n        user = self.hrb_user.isChecked()\r\n        if name:\r\n            if admin:\r\n                self.send_msg('signup', ['관리자', name])\r\n            elif user:\r\n                self.send_msg('signup', ['학생', name])\r\n            self.hle_add_name.clear()\r\n\r\n###########################################################################\r\n# 도구 메서드\r\n###########################################################################\r\n\r\n    # tkinter 를 이용한 messagbox 송출\r\n    def messagebox(self, value):\r\n        tk_window = Tk()\r\n        tk_window.geometry(\"0x0+3000+6000\")\r\n        messagebox.showinfo('안내창', f'{value}')\r\n        tk_window.destroy()\r\n\r\n    # 주제, 내용으로 서버에 데이터 전송\r\n    def send_msg(self, head, value):\r\n        msg = json.dumps([head, value])\r\n        self.sock.sendall(msg.encode())\r\n        self.p_msg('보낸 메시지:', msg)\r\n\r\n    # 메시지 종류, 내용을 매개 변수로 콘솔에 확인 내용 출력\r\n    def p_msg(self, head, *msg):\r\n        if msg:\r\n            print(f'{datetime.now()} / {head} {msg}')\r\n        else:\r\n            print(f'{datetime.now()} / {head}')\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app = QApplication(sys.argv)\r\n    myWindow = WindowClass()\r\n    myWindow.show()\r\n    app.exec_()
===================================================================
diff --git a/student.py b/student.py
--- a/student.py	
+++ b/student.py	
@@ -118,15 +118,14 @@
 
     # 회원 가입 (선생, 학생 프로그램 상관없이 서버에 [권한, 이름] 전송)
     def signup(self):
-        name = self.hle_add_name.text().split()[0]
+        name = self.hle_add_name.text()
         admin = self.hrb_admin.isChecked()
         user = self.hrb_user.isChecked()
-        if name:
-            if admin:
-                self.send_msg('signup', ['관리자', name])
-            elif user:
-                self.send_msg('signup', ['학생', name])
-            self.hle_add_name.clear()
+        if admin:
+            self.send_msg('signup', ['관리자', name])
+        elif user:
+            self.send_msg('signup', ['학생', name])
+        self.hle_add_name.clear()
 
 ###########################################################################
 # 도구 메서드
